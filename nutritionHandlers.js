/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∏—Ç–∞–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
 */

const { products, mealTemplates, nutritionGoals } = require('../../data/nutrition');
const { Markup } = require('telegraf');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è
const nutritionSessions = {};

/**
 * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è
 */
async function startNutritionPlanning(ctx) {
  const userId = ctx.from.id;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  nutritionSessions[userId] = {
    step: 'select_day',
    meals: {},
    userInfo: {}
  };
  
  await ctx.reply(
    '–î–∞–≤–∞–π—Ç–µ —Å–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ! –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞–Ω?',
    Markup.keyboard([
      ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞'],
      ['–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é'],
      ['–û—Ç–º–µ–Ω–∞']
    ]).resize()
  );
}

/**
 * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
async function startUserInfoCollection(ctx) {
  const userId = ctx.from.id;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (!nutritionSessions[userId]) {
    nutritionSessions[userId] = {
      step: 'ask_gender',
      userInfo: {}
    };
  } else {
    nutritionSessions[userId].step = 'ask_gender';
  }
  
  await ctx.reply(
    '–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–Ω–µ –Ω—É–∂–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å.\n\n' +
    '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
    Markup.keyboard([
      ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'],
      ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
    ]).resize()
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function handleDaySelection(ctx) {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  if (!nutritionSessions[userId]) return;
  
  if (text === '–û—Ç–º–µ–Ω–∞') {
    delete nutritionSessions[userId];
    return await ctx.reply(
      '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
      Markup.removeKeyboard()
    );
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
  nutritionSessions[userId].selectedDay = text;
  nutritionSessions[userId].step = 'select_meal';
  
  await ctx.reply(
    `–û—Ç–ª–∏—á–Ω–æ! –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ ${text.toLowerCase()}.\n\n` +
    '–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?',
    Markup.keyboard([
      ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω'],
      ['–ü–µ—Ä–µ–∫—É—Å', '–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏'],
      ['–ì–æ—Ç–æ–≤–æ', '–û—Ç–º–µ–Ω–∞']
    ]).resize()
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
async function handleMealSelection(ctx) {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  if (!nutritionSessions[userId]) return;
  
  if (text === '–û—Ç–º–µ–Ω–∞') {
    delete nutritionSessions[userId];
    return await ctx.reply(
      '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
      Markup.removeKeyboard()
    );
  }
  
  if (text === '–ì–æ—Ç–æ–≤–æ') {
    return await showNutritionSummary(ctx);
  }
  
  // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–∏
  const mealTypeMap = {
    '–ó–∞–≤—Ç—Ä–∞–∫': 'breakfast',
    '–û–±–µ–¥': 'lunch',
    '–£–∂–∏–Ω': 'dinner',
    '–ü–µ—Ä–µ–∫—É—Å': 'snack'
  };
  
  if (text === '–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏') {
    nutritionSessions[userId].step = 'all_meals';
    return await planAllMeals(ctx);
  }
  
  const mealType = mealTypeMap[text];
  
  if (!mealType) {
    return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
  }
  
  nutritionSessions[userId].currentMeal = mealType;
  nutritionSessions[userId].step = 'select_meal_option';
  
  // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
  const templates = mealTemplates[mealType];
  
  const buttons = templates.map(template => [template.name]);
  buttons.push(['–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç']);
  buttons.push(['–ù–∞–∑–∞–¥']);
  
  await ctx.reply(
    `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è ${text.toLowerCase()} –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:`,
    Markup.keyboard(buttons).resize()
  );
}

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ —Å—Ä–∞–∑—É
 */
async function planAllMeals(ctx) {
  const userId = ctx.from.id;
  
  if (!nutritionSessions[userId]) return;
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
  const mealTypes = ['breakfast', 'lunch', 'dinner', 'snack'];
  const plan = {};
  
  mealTypes.forEach(type => {
    const templates = mealTemplates[type];
    const randomIndex = Math.floor(Math.random() * templates.length);
    plan[type] = templates[randomIndex];
  });
  
  nutritionSessions[userId].meals = plan;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
  const totalNutrition = calculateTotalNutrition(plan);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
  let message = `üìã –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ ${nutritionSessions[userId].selectedDay.toLowerCase()}:\n\n`;
  
  message += `üç≥ *–ó–∞–≤—Ç—Ä–∞–∫*: ${plan.breakfast.name}\n`;
  message += formatMealItems(plan.breakfast.items);
  message += '\n\n';
  
  message += `ü•ó *–û–±–µ–¥*: ${plan.lunch.name}\n`;
  message += formatMealItems(plan.lunch.items);
  message += '\n\n';
  
  message += `üçΩ *–£–∂–∏–Ω*: ${plan.dinner.name}\n`;
  message += formatMealItems(plan.dinner.items);
  message += '\n\n';
  
  message += `üçå *–ü–µ—Ä–µ–∫—É—Å*: ${plan.snack.name}\n`;
  message += formatMealItems(plan.snack.items);
  message += '\n\n';
  
  message += `üìä *–û–±—â–∞—è –ø–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å*:\n`;
  message += `–ö–∞–ª–æ—Ä–∏–∏: ${Math.round(totalNutrition.calories)} –∫–∫–∞–ª\n`;
  message += `–ë–µ–ª–∫–∏: ${Math.round(totalNutrition.protein)}–≥\n`;
  message += `–ñ–∏—Ä—ã: ${Math.round(totalNutrition.fat)}–≥\n`;
  message += `–£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(totalNutrition.carbs)}–≥\n`;
  
  await ctx.replyWithMarkdown(
    message,
    Markup.keyboard([
      ['–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω', '–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω'],
      ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize()
  );
  
  nutritionSessions[userId].step = 'plan_created';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
 */
function formatMealItems(items) {
  return items.map(item => {
    const product = products[item.name];
    const unit = product && product.unit ? product.unit : '–≥';
    return `  ‚Ä¢ ${item.name} - ${item.amount} ${unit}`;
  }).join('\n');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
async function handleMealTemplateSelection(ctx) {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  if (!nutritionSessions[userId]) return;
  
  if (text === '–ù–∞–∑–∞–¥') {
    nutritionSessions[userId].step = 'select_meal';
    return await ctx.reply(
      '–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?',
      Markup.keyboard([
        ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω'],
        ['–ü–µ—Ä–µ–∫—É—Å', '–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏'],
        ['–ì–æ—Ç–æ–≤–æ', '–û—Ç–º–µ–Ω–∞']
      ]).resize()
    );
  }
  
  const currentMeal = nutritionSessions[userId].currentMeal;
  const templates = mealTemplates[currentMeal];
  
  if (text === '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç') {
    nutritionSessions[userId].step = 'custom_meal';
    return await ctx.reply(
      '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏. –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n' +
      '—è–π—Ü–æ 2 —à—Ç, —Ç–≤–æ—Ä–æ–≥ 100 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç',
      Markup.keyboard([['–û—Ç–º–µ–Ω–∞']]).resize()
    );
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
  const selectedTemplate = templates.find(template => template.name === text);
  
  if (!selectedTemplate) {
    return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
  if (!nutritionSessions[userId].meals) {
    nutritionSessions[userId].meals = {};
  }
  
  nutritionSessions[userId].meals[currentMeal] = selectedTemplate;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
  const nutrition = calculateNutrition(selectedTemplate.items);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º –∏ –µ–≥–æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é
  let message = `–í—ã –≤—ã–±—Ä–∞–ª–∏: *${selectedTemplate.name}*\n\n`;
  message += formatMealItems(selectedTemplate.items);
  message += '\n\n';
  message += `üìä *–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å*:\n`;
  message += `–ö–∞–ª–æ—Ä–∏–∏: ${Math.round(nutrition.calories)} –∫–∫–∞–ª\n`;
  message += `–ë–µ–ª–∫–∏: ${Math.round(nutrition.protein)}–≥\n`;
  message += `–ñ–∏—Ä—ã: ${Math.round(nutrition.fat)}–≥\n`;
  message += `–£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(nutrition.carbs)}–≥\n`;
  
  await ctx.replyWithMarkdown(
    message,
    Markup.keyboard([
      ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω'],
      ['–ü–µ—Ä–µ–∫—É—Å', '–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏'],
      ['–ì–æ—Ç–æ–≤–æ', '–û—Ç–º–µ–Ω–∞']
    ]).resize()
  );
  
  nutritionSessions[userId].step = 'select_meal';
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
 */
async function handleCustomMeal(ctx) {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  if (!nutritionSessions[userId]) return;
  
  if (text === '–û—Ç–º–µ–Ω–∞') {
    nutritionSessions[userId].step = 'select_meal';
    return await ctx.reply(
      '–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?',
      Markup.keyboard([
        ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω'],
        ['–ü–µ—Ä–µ–∫—É—Å', '–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏'],
        ['–ì–æ—Ç–æ–≤–æ', '–û—Ç–º–µ–Ω–∞']
      ]).resize()
    );
  }
  
  // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  const items = parseProductsText(text);
  
  if (items.length === 0) {
    return await ctx.reply(
      '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      '—è–π—Ü–æ 2 —à—Ç, —Ç–≤–æ—Ä–æ–≥ 100 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç'
    );
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω
  const customTemplate = {
    name: '–ú–æ–π –≤–∞—Ä–∏–∞–Ω—Ç',
    items: items
  };
  
  const currentMeal = nutritionSessions[userId].currentMeal;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω
  if (!nutritionSessions[userId].meals) {
    nutritionSessions[userId].meals = {};
  }
  
  nutritionSessions[userId].meals[currentMeal] = customTemplate;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
  const nutrition = calculateNutrition(items);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —à–∞–±–ª–æ–Ω–æ–º –∏ –µ–≥–æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é
  let message = `–í—ã –≤—ã–±—Ä–∞–ª–∏: *${customTemplate.name}*\n\n`;
  message += formatMealItems(items);
  message += '\n\n';
  message += `üìä *–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å*:\n`;
  message += `–ö–∞–ª–æ—Ä–∏–∏: ${Math.round(nutrition.calories)} –∫–∫–∞–ª\n`;
  message += `–ë–µ–ª–∫–∏: ${Math.round(nutrition.protein)}–≥\n`;
  message += `–ñ–∏—Ä—ã: ${Math.round(nutrition.fat)}–≥\n`;
  message += `–£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(nutrition.carbs)}–≥\n`;
  
  await ctx.replyWithMarkdown(
    message,
    Markup.keyboard([
      ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω'],
      ['–ü–µ—Ä–µ–∫—É—Å', '–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏'],
      ['–ì–æ—Ç–æ–≤–æ', '–û—Ç–º–µ–Ω–∞']
    ]).resize()
  );
  
  nutritionSessions[userId].step = 'select_meal';
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø–∏—Ç–∞–Ω–∏—é
 */
async function showNutritionSummary(ctx) {
  const userId = ctx.from.id;
  
  if (!nutritionSessions[userId] || !nutritionSessions[userId].meals) {
    return await ctx.reply(
      '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.',
      Markup.keyboard([
        ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω'],
        ['–ü–µ—Ä–µ–∫—É—Å', '–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏'],
        ['–û—Ç–º–µ–Ω–∞']
      ]).resize()
    );
  }
  
  const meals = nutritionSessions[userId].meals;
  const mealKeys = Object.keys(meals);
  
  if (mealKeys.length === 0) {
    return await ctx.reply(
      '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.',
      Markup.keyboard([
        ['–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω'],
        ['–ü–µ—Ä–µ–∫—É—Å', '–í—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏'],
        ['–û—Ç–º–µ–Ω–∞']
      ]).resize()
    );
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
  const totalNutrition = calculateTotalNutrition(meals);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π
  let message = `üìã –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ ${nutritionSessions[userId].selectedDay.toLowerCase()}:\n\n`;
  
  // –ú–∞–ø–ø–∏–Ω–≥ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∫–ª—é—á–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const mealTypeMap = {
    'breakfast': 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫',
    'lunch': 'ü•ó –û–±–µ–¥',
    'dinner': 'üçΩ –£–∂–∏–Ω',
    'snack': 'üçå –ü–µ—Ä–µ–∫—É—Å'
  };
  
  mealKeys.forEach(key => {
    const meal = meals[key];
    message += `${mealTypeMap[key]}: *${meal.name}*\n`;
    message += formatMealItems(meal.items);
    message += '\n\n';
  });
  
  message += `üìä *–û–±—â–∞—è –ø–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å*:\n`;
  message += `–ö–∞–ª–æ—Ä–∏–∏: ${Math.round(totalNutrition.calories)} –∫–∫–∞–ª\n`;
  message += `–ë–µ–ª–∫–∏: ${Math.round(totalNutrition.protein)}–≥\n`;
  message += `–ñ–∏—Ä—ã: ${Math.round(totalNutrition.fat)}–≥\n`;
  message += `–£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(totalNutrition.carbs)}–≥\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é
  message += '\nüí° *–°–æ–≤–µ—Ç—ã*:\n';
  message += '‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏\n';
  message += '‚Ä¢ –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n';
  message += '‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω–µ\n';
  
  await ctx.replyWithMarkdown(
    message,
    Markup.keyboard([
      ['–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω', '–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω'],
      ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize()
  );
  
  nutritionSessions[userId].step = 'plan_created';
}

/**
 * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
async function calculateNutritionByText(ctx) {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  const items = parseProductsText(text);
  
  if (items.length === 0) {
    return await ctx.reply(
      '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
      '—è–π—Ü–æ 2 —à—Ç, —Ç–≤–æ—Ä–æ–≥ 100 –≥, –±–∞–Ω–∞–Ω 1 —à—Ç'
    );
  }
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
  const nutrition = calculateNutrition(items);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
  let message = `üìä *–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å*:\n\n`;
  message += formatMealItems(items);
  message += '\n\n';
  message += `–ö–∞–ª–æ—Ä–∏–∏: ${Math.round(nutrition.calories)} –∫–∫–∞–ª\n`;
  message += `–ë–µ–ª–∫–∏: ${Math.round(nutrition.protein)}–≥\n`;
  message += `–ñ–∏—Ä—ã: ${Math.round(nutrition.fat)}–≥\n`;
  message += `–£–≥–ª–µ–≤–æ–¥—ã: ${Math.round(nutrition.carbs)}–≥\n`;
  
  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ü–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
  if (nutritionSessions[userId] && nutritionSessions[userId].userInfo && nutritionSessions[userId].userInfo.goal) {
    const goal = nutritionSessions[userId].userInfo.goal;
    const weight = nutritionSessions[userId].userInfo.weight || 70; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const gender = nutritionSessions[userId].userInfo.gender || 'male'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    const goalInfo = nutritionGoals[goal];
    
    if (goalInfo) {
      const recommendedCalories = goalInfo.dailyCalories[gender](weight);
      const mealPercentage = 0.3; // –ü—Ä–∏–º–µ—Ä–Ω–æ 30% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
      
      message += '\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*:\n';
      
      if (nutrition.calories < recommendedCalories * mealPercentage * 0.7) {
        message += `–≠—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω—å—à–µ –∫–∞–ª–æ—Ä–∏–π, —á–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏ "${goal}".\n`;
      } else if (nutrition.calories > recommendedCalories * mealPercentage * 1.3) {
        message += `–≠—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –∫–∞–ª–æ—Ä–∏–π, —á–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏ "${goal}".\n`;
      } else {
        message += `–≠—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ö–æ—Ä–æ—à–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–π —Ü–µ–ª–∏ "${goal}".\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
      const randomTip = goalInfo.tips[Math.floor(Math.random() * goalInfo.tips.length)];
      message += `–°–æ–≤–µ—Ç: ${randomTip}`;
    }
  }
  
  await ctx.replyWithMarkdown(
    message,
    Markup.keyboard([
      ['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£', '–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ'],
      ['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize()
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
async function handleUserInfoInput(ctx) {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  if (!nutritionSessions[userId]) return;
  
  const step = nutritionSessions[userId].step;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
  if (text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
    nutritionSessions[userId].step = 'completed';
    return await showMainMenu(ctx);
  }
  
  switch (step) {
    case 'ask_gender':
      if (text === '–ú—É–∂—Å–∫–æ–π' || text === '–ñ–µ–Ω—Å–∫–∏–π') {
        nutritionSessions[userId].userInfo.gender = text === '–ú—É–∂—Å–∫–æ–π' ? 'male' : 'female';
        nutritionSessions[userId].step = 'ask_age';
        
        await ctx.reply(
          '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:',
          Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]).resize()
        );
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
      }
      break;
      
    case 'ask_age':
      const age = parseInt(text);
      if (!isNaN(age) && age > 0 && age < 120) {
        nutritionSessions[userId].userInfo.age = age;
        nutritionSessions[userId].step = 'ask_weight';
        
        await ctx.reply(
          '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):',
          Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]).resize()
        );
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120).');
      }
      break;
      
    case 'ask_weight':
      const weight = parseFloat(text.replace(',', '.'));
      if (!isNaN(weight) && weight > 30 && weight < 250) {
        nutritionSessions[userId].userInfo.weight = weight;
        nutritionSessions[userId].step = 'ask_height';
        
        await ctx.reply(
          '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):',
          Markup.keyboard([['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]).resize()
        );
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 250).');
      }
      break;
      
    case 'ask_height':
      const height = parseInt(text);
      if (!isNaN(height) && height > 100 && height < 250) {
        nutritionSessions[userId].userInfo.height = height;
        nutritionSessions[userId].step = 'ask_goal';
        
        await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:',
          Markup.keyboard([
            ['–ü–æ—Ö—É–¥–µ—Ç—å', '–î–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ä–º—É', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É'],
            ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
          ]).resize()
        );
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 250).');
      }
      break;
      
    case 'ask_goal':
      if (['–ü–æ—Ö—É–¥–µ—Ç—å', '–î–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ä–º—É', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É'].includes(text)) {
        nutritionSessions[userId].userInfo.goal = text.toLowerCase();
        nutritionSessions[userId].step = 'completed';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        
        await ctx.reply(
          '–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.',
          Markup.removeKeyboard()
        );
        
        await showMainMenu(ctx);
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
      }
      break;
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 */
async function showMainMenu(ctx) {
  await ctx.reply(
    '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
    Markup.keyboard([
      ['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£', '–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ'],
      ['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–ü–æ–º–æ—â—å']
    ]).resize()
  );
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
function parseProductsText(text) {
  const items = [];
  
  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–ø–æ –∑–∞–ø—è—Ç–æ–π)
  const productStrings = text.split(',').map(s => s.trim());
  
  productStrings.forEach(productString => {
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏–∑ –±–∞–∑—ã
    for (const productName in products) {
      if (productString.includes(productName)) {
        // –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const regex = new RegExp(`(\\d+(?:[.,]\\d+)?)(?: *)(${products[productName].unit}|—à—Ç)?`, 'i');
        const match = productString.match(regex);
        
        if (match) {
          const amount = parseFloat(match[1].replace(',', '.'));
          items.push({
            name: productName,
            amount: amount
          });
          break;
        } else {
          // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 100–≥/–º–ª –∏–ª–∏ 1 —à—Ç
          const defaultAmount = products[productName].unit === '—à—Ç' ? 1 : 100;
          items.push({
            name: productName,
            amount: defaultAmount
          });
          break;
        }
      }
    }
  });
  
  return items;
}

/**
 * –†–∞—Å—á–µ—Ç –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
function calculateNutrition(items) {
  let calories = 0;
  let protein = 0;
  let fat = 0;
  let carbs = 0;
  
  items.forEach(item => {
    const product = products[item.name];
    
    if (product) {
      // –î–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏–∑–º–µ—Ä—è–µ–º—ã—Ö –≤ —à—Ç—É–∫–∞—Ö, —É—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –æ–¥–Ω–æ–π —à—Ç—É–∫–∏
      let multiplier = 1;
      
      if (product.unit === '—à—Ç' && product.weight) {
        multiplier = product.weight / 100; // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ 100–≥
      }
      
      calories += (product.calories * item.amount * multiplier) / (product.unit === '—à—Ç' ? 1 : 100);
      protein += (product.protein * item.amount * multiplier) / (product.unit === '—à—Ç' ? 1 : 100);
      fat += (product.fat * item.amount * multiplier) / (product.unit === '—à—Ç' ? 1 : 100);
      carbs += (product.carbs * item.amount * multiplier) / (product.unit === '—à—Ç' ? 1 : 100);
    }
  });
  
  return { calories, protein, fat, carbs };
}

/**
 * –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
 */
function calculateTotalNutrition(meals) {
  let calories = 0;
  let protein = 0;
  let fat = 0;
  let carbs = 0;
  
  Object.values(meals).forEach(meal => {
    const nutrition = calculateNutrition(meal.items);
    calories += nutrition.calories;
    protein += nutrition.protein;
    fat += nutrition.fat;
    carbs += nutrition.carbs;
  });
  
  return { calories, protein, fat, carbs };
}

module.exports = {
  startNutritionPlanning,
  startUserInfoCollection,
  handleDaySelection,
  handleMealSelection,
  handleMealTemplateSelection,
  handleCustomMeal,
  showNutritionSummary,
  calculateNutritionByText,
  handleUserInfoInput,
  showMainMenu,
  nutritionSessions
};
